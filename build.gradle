// gradle学习地址：https://itdashu.com/docs/gradlebase/63926-2/log.html
// buildScript 代码块中脚本优先执行
buildscript {
    ext {
        springIOVersion = '1.0.0.RELEASE'
        springBootVersion = '2.2.2.RELEASE'
    }
    repositories {
        maven { url 'file:///D:/gradle-repository'}
        mavenLocal()
        // 优先使用国内源
        maven { url 'https://maven.aliyun.com/repository/public' }
        mavenCentral()
    }
    dependencies {
        // classpath声明 说明了在执行其余的脚本时，ClassLoader 可以使用这些依赖项
        classpath "io.spring.gradle:dependency-management-plugin:${springIOVersion}"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'war'

// 使用spring boot
apply plugin: "org.springframework.boot"
// 使用spring boot的自动依赖管理
apply plugin: 'io.spring.dependency-management'

group 'com.echuang'
version '1.0-SNAPSHOT'

// 指定java版本
sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

repositories {
    // 使用国内的源
    maven { url 'https://maven.aliyun.com/repository/public' }
    mavenCentral()
}
/**
 * 从gradle升级到3.0只有就多出了api和implementation来引入依赖包的方式
 * api和之前的compile没啥区别用哪个都一个效果
 * implementation引入的依赖不具有传递性，只能在应用的implementation中使用
 * 比如：A引B，然后B引C，
 *     如果在B中使用implementation引入C那么A中是不能使用C中的内容的，
 *     如果在B中使用compile引入C那么A中能使用C中的内容，也就是说compile和api具有传递性，而implementation不具有传递性
 */
// implementation
dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'

    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.12'
    compile group: 'org.aspectj', name: 'aspectjweaver', version: '1.9.5'

    // shiro
    compile group: 'org.apache.shiro', name: 'shiro-core', version: '1.5.3'
    compile group: 'org.apache.shiro', name: 'shiro-web', version: '1.5.3'
    compile group: 'org.apache.shiro', name: 'shiro-spring', version: '1.5.3'

    // logback
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    // db
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.16'
    compile group: 'com.alibaba', name: 'druid-spring-boot-starter', version: '1.1.22'
    compile group: 'com.baomidou', name: 'mybatis-plus-boot-starter', version: '3.3.1'

    // kaptcha
    compile group: 'com.github.axet', name: 'kaptcha', version: '0.0.9'

    // joda-time
    compile group: 'joda-time', name: 'joda-time', version: '2.10.6'

    compile group: 'com.auth0', name: 'java-jwt', version: '3.10.3'
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.62'

    // spring boot:run
    runtime('org.springframework.boot:spring-boot-devtools')

    // 设置内嵌tomcat,对于编译和测试classpath有效，但在运行时候无效,因为运行是由外置tomcat提供
    // provided  -->  compileOnly
    providedCompile 'org.springframework.boot:spring-boot-starter-tomcat'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}
